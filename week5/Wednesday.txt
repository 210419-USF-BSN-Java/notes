npm (continued)
	- npm init
		- initializes a new js project
			- generates package.json file
				- like pom.xml
				- lists dependencies used
				- project information
					- ie: entry point...

	- node_modules
		- when npm install is ran, downloads required dependencies in that folder
		- good practice to add node_modules into a .gitignore
			- otherwise all of the dependencies are pushed to Github
		- when pulling a project can retrieve the node_modules folder by running
			npm install
		- managed by npm
		- can uninstall dependency by running npm uninstall
	- npm install 
		-g flag to make "global", makes the dependency available outside of the project

	- package-lock.json
		- specifies the "exact" version of the dependencies used so that the project is 100% reproducible


Typescript
	- Made by Microsoft
	- is a superset of JS
		- all JS is valid TS
			- Anything you can use in JS you can use in TS
	- features
		- static typing
		- compile/transpile time check
		- interfaces
		- access modifiers
	- Advantages
		- more Object Oriented
	- Disadvantages
		- can't actually run typescript in your browser
	- Has to be transpiled to JS before can be executed
		- Transpilation
			- from typescript to js
	- npm install -g typescript
	- types
		- JavaScript types
		- TS types (specific)
			- any
			- void
			- never
			- enums
			- tuple
	- Access modifiers
		- public (the default), private, protected
	- non-access modifiers
		- readonly
	- Interfaces
		- we're going to use those for type checking
	- tsc
		- command use to transpile .ts into .js
		- by default uses ES5 (?)
		- specify target using --target flag
			ie: tsc --target es6 something.ts

Angular
	- is a front-end framework
	- used to make dynamic, single page applications
		- Single Page Application (SPA)
			- Design pattern
			- loading all of the static resources at once
				- injecting/removing views and functionality in a webpage rather than requesting a whole new resource from the server
					- components
						- basic building block of Angular
		- Dependency Injection
			- Design pattern
			- Relying on a framework to provide the instances of our "dependencies" rather than creating it ourselves
			- Abstracts away implementation details
	- Angular.js vs Angular
		- Angular.js 
			- written in Javascript
		- Angular
			- Any version after Angular.js (2+)
			- use ts
	- Powerful CLI(command line interface)
		- ng new [app-name]
		- ng generate [service/component/module...] [name]
			- can shorten to ng g [s/c/...] [name]
		- ng serve
			- can add --open (opens automatically)
			- "serves" the project locally, by default onto port 4200
		- ng test
			- runs protractor & jasmine tests (spec.ts)
		- ng build
			- builds/packages the application as an artifact to be deployed
	- Project setup
		- angular.json
			- Angular settings
		- tsconfig.json
			- Typescript settings
				- ie: transpiling target..
	- Module
		- group of related components
		- At least 1 mondule
			- by default AppModule which is the root module
				- convention, can be renamed if desired
		- @NgModule decorator
			- defines 4 properties
				- declarations - defines associated components
				- imports - defines additional modules
				- providers - defines services associated with the modules
				- bootstrap - defines root component
	- Decorators
		- "fancy functions" that provide metadata as a parameter
		- Types
			- Class, method, property, parameter
		- Each "element" in angular has their own decorator
			- @Component
			- @NgModule
			- @Injectable - services
			- @Pipe
	- Components
		- Building block of Angular, used to design webpages
			- web page is built by combining components together
		- When generated, a component is comprised of 4 files
			- html - html for the component / template for a component
			- css - css for the component
			- ts - Typescript/functionality for the component
			- spec.ts - unit tests for the component
		- @Component decorator
			- selector

	- DOM manipulation
		- Inject values
		- Eventlisteners
		- Create/Remove elements
		- Change attributes
		- Retrieving values

	- Databinding
		- way to communication between the HTML/DOM and the "typescript"
		- One way binding
			- String interpolation
				- displays data into the view
				- from ts -> html
				- name:string = 'Kevin'; in ts file
				- <p> {{ name }} </p> in html 
			- eventbinding
				- assign functionality to an event
				- from HTML -> ts
				- function doSomething() { ... }; in ts file
				- <button (event)='doSomething'>doSomething</button>
			- attribute/property
				- goes from TS to HTML
				- Assigns a value to an attribute/property of an html document
				- value:string = 'value';
				- <p [attribute/property]="value"></p> - in html

		- Two way binding
			- both ways, from HTML to TS and from TS to HTML
			- import FormModule in app.module.ts
			- name:string = 'Kevin'; in ts file
			- <input [(ngModel)]='name> in html
			- Also referred to as banana in a box
	- 