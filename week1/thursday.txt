POJO/ Java Beans
	- POJO: Plain Old Java Object 
		- Any java object, not bound to any specific restriction
		- Used to define an entity
	- Java Bean:
		- Special type of POJOs
			- All Java Beans are POJOs but not all POJOs are Java beans
		- should implement Serializable interface
			- Marker interface to provide information to the compiler that the class can be serialized
				- serialization: process of converting an object into a stream of byte to store that object (file, db, ...)
		- no-args constructor
		- all fields need to be private
		- setter/getters
		- (override Objects methods: toString(), equals(), hashcode())

variable arguments (varargs)
	- unique type of parameter which allows any number of arguments to be passed into a method
	- it must be the last parameter in the method's parameter list
		- [accessMod] [returnType] method name([...], [type]... [nameOfVariable])

Shortcircuiting
	-  when using & or |, both sides are evaluated
	-  && and ||, have short circuiting behavior ie: 
		- false && anything => false
	  	- true || anything => true

Exception:
	- represents a condition that prevents a method from completing successfully
	- object created from the exception class or its subclasses
	- Inherit from the Throwable class
	- Divided into Checked and Unchecked exceptions
		- Checked exceptions are checked by the compiler
			- cannot compile code until exceptions are handled
			- Subclasses of Exception but NOT Runtime Exception
			- Arise from circumstances outside of the programmer's control
				- FileNotFoundException, ClassNotFound
		- Unchecked/Runtime exceptions, these are not accounted for by the compiler
			- Subclasses of RuntimeException
			- Arise from coding errors/ can usually be prevented
				- ArrayIndexOutOfBoundsException, Arithmetic... 
		- ALL EXCEPTIONS OCCUR AT RUNTIME.

Errors:
	- extends Throwable (class)
	- Identify internal errors that cannot be recovered from
		- bad practice to catch those
	- StackOverFlowError
	- NoClassDefFoundError 

Exception Handling
	- Try block
		- used to encapsulate any statements that may throw an exception
	- Catch block
		- Exception handler, specifies what logic/behavior is to be executed is an exception is caught
		- catch(ExceptionType1 | ExceptionType2 e) { logic }
			- Can catch multiple types, but should be siblings on the hierarchy
		- can have multiple catch blocks
			- most specific to least specific
				- otherwise the most generic exception will catch it
	- Finally
		- executes regardless of the outcome
			- only way to prevent the finally block from occuring is to use System.exit(0); before that
		- used to close resources after the try statement
	- try-with-resources
		- allows a resource to be closed without needing a finally block
		- resource must implement the autoclosable interface
	- Throws
		- use in method signature "throws..."
		- if there's not enough information to handle an exception properly at the time it is thrown, "throws" lets java know that the exception will be handled later on by the caller 

Throwing exceptions
	- throw new Exception();

Custom exception
	- can create an exception by extending Exception or its subclasses
		- to create a Runtime exception, extend Runtime exception or its subclasses

Datastructures
	- solutions to interact/work with data

Collection
	- is an interface that can be considered the "super" interface from which every List/Set/Queue comes from
		- declares methods that are going to be implemented by implementing classes
			- add();
			- remove();
			- contains();
			- size();
		- Only work with objects (Wrapper classes)
		- Collection interface is not to be confused with the Collections class
			- A class that provides utility methods to work with collection
		- Implements Iterable, what allows it to be iterated over/ use an iterator
			- allows to iterate over a collection
	- List
		- interface that extends collection, they can hold duplicate values
		- Concrete implementations:
			- ArrayList
				- Dynamically sized array in which elements can be added and removed
				- Arraylists leverage indexes, which make them more efficient for retrieval operations
			- LinkedList
				- Consists of a series of nodes which store data and a reference to the next node
				- LinkedList are better for insertion and deletion
	- Set
		- interface that extends collection, do not hold duplicate values
		- Concrete implementations
			- HashSet
				- unordered
				- HashMap in which the "value" is just a dummy object
			- TreeSet 
				- ordered
					- follows "natural ordering"
						- specified using Comparator/Comparable
	- Queue
		- interface that extends Collection, follow a FIFO order (First in first out)
		- Concrete implementation:
			- Priority queues
				- ordered by priority
			- LinkedList
				- implement both List and Queues
		- Additional methods
			- peek, poll...
	- Map
		- interface that does not extend Collection, leverage a key value pair system
			- they do not implement the iterable interface, cannot use a for-each loop (directly) on maps
		- concrete implementation
			- HashMap
			- TreeMap

Comparable
	- functional interface
	- compareTo method
		- to be implemented by class itself
		- returns an integer and is used to define an order
			- if integer is negative, is of lesser value
			- if integer is positive, is of greater value
			- if 0, the two object are equal value

Comparator
	- functional interface
	- compare method
	- have to use a comparator object			


Lambda expressions
	- allow for compact expression of instances of single-method classes
		- to implement a functional interface without requiring a whole new class to do so
			- Runnable interface, run method
	- syntax
		- [interfaceName] [objName] = () [returnValue];
		- [interfaceName] [objName] = ([parameters]) [returnValue];
		- [interfaceName] [objName] = ([parameters]) {
			//code goes here
		};


Multithreading
	- refers to dealing with application with concurrent sub-processes
		- these sub-processes/path of executions are refered to as threads
	- types of threads
		- User threads
			- JVM ensures their execution to completion before exiting the application
				- ie: main method - main thread
		- Daemon threads
			- "optional"
			- lower priority
			- run in the background
				- ie: gc
		- Each thread gets their own stack but all share the same heap

Creating and running threads
	- extend the Thread class
	- implement the Runnable interface
		- preferred way
	- override the run() method
		- specifies the behavior for a thread
	- instantiate a thread object and invoke the start() method to run it
		- start() method creates a new path of execution and runs the run() on it
		- otherwise if "run()" is called, the run method is executed on the main thread

States of a Thread
	- New
		- created a thread object, but run() hasn't been called
	- Runnable
		- run() has been called and is executing
	- Blocked
		- waiting for another thread to be done accessing a resource on which a lock has been placed on
		- Synchronization dependent
			- synchronized keyword which prevents more than one thread at a time to access a resource
	- Waiting
		- wait()
			- Thread would waiting until notify()/notifyAll() is called
		- join()
			- stops the execution of a thread until another thread is done executing
	- Timed-waiting
		- sleep()
			- wait a certain amount of time
	- Terminated
		- everything has been executed