Spring AOP
	- Spring module
	- Aspect Oriented Programming
		- Aspect is a unit of modularity
			- ie: Objects in OOP
			- Used to handle Cross Cutting Concerns(CCC)
				- Any logic not directly related to the application/business logic
				- Global concerns to be kept in mind
					- ie: 
						- logging
						- validation
						- security
				- Can be handled universally rather than within the business logic
					- separation of concern
		- AspectJ
			- Annotation based framework to work with aspects
			- Annotation based
			- add: <aop:aspectj-autoproxy/> in xml config file
	- Terminology
		- aspect
			- an entity that addresses a Cross Cutting Concern via an advice
			- typically a class annotated with @Aspect
		- advice
			- an entity that actually modifies the code
			- typically a method within the aspect class
		- joinpoint
			- any code that can be modified by an advice/ can be advised
			- typically, in the context of Spring, is any method on a Spring bean
		- pointcut
			- expression that targets specific joinpoints
			- @Pointcut([expression to target a joinpoint])
				- @Pointcut("execution(returnType package...methodname parameters))")
	- AOP (in general) leverages AOP proxies to implement the advices in the methods' execution
		- can think as having the advices injected where applicable
	- Types of advices
		- @Before: before the advised method executes
		- @After: after the advised method executes
		- @AfterReturning: after the advised method executes successfully (no exception/error)
		- @AfterThrowing: after the advised method throws an exception/error
		- @Around: "most powerful" advice, happens before the advised method, can tell when the method should be executed, if it should be executed, can continue after the method


Spring Boot
	- Spring project
		- makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run".
		- takes an opinionated view of the Spring platform and third-party libraries 
			- need minimal Spring configuration.
	- Can define Spring Boot Project using Spring Initialzr
	- "Convention over configuration"
		- reduces the amount of configuration by assuming common conventions
			- ie: Tomcat on port 8080
			
		- no xml configuration
			- can still configure specific configs using application.properties or application.yml
				- ie:
					- override convention
					- db credentials
	- Set Up
		- the main method class goes in a parent package - (base package)
			- Otherwise component scan may not find relevant beans
		- call SpringApplication.run([ClassName].class, args);
		- @SpringBootApplication
			- abtracts away
				- @Configuration
				- @EnableAutoConfiguration
				- @ComponentScan
	- DevTools
		- set of tools to ease application development
			- automatic server restart
			- live reloading of the ApplicationContext
			- & more...
	- actuator
		- brings production-ready features to the application
			- metrics (traffic, app state...)
			- bean info
			- health checks
			- more...


Spring Data - Continued
	- Transaction management
		- Spring provides comprehensive transaction support
	- @Transactional
		- Indicates that a method with be handled in the context of a Spring handled transaction
		- Has attributes to override default settings:
			- isolation
				- @Transactional(isolation=Isolation.[Isolaction_Level])
			- rollbackFor
				- @Transactional(rollbackFor={[ExceptionName].class})
			- propagation
				- defines how nested transactions are handled
	- @Transactional(propagation=Propagation.[value])
		- REQUIRED
			- executes in the current transaction if one exists, otherwise creates one
			- default... I think
				- ie: if not specified otherwise
		- NESTED
			- executes in the same transaction, but separated by a savepoint
		- REQUIRES_NEW
			- creates a new transaction which commits/rolls back independently from other transactions
		- MANDATORY
			- MUST execute in an existing transaction or will throw an exception if none is open
		- NEVER
			- MUST execute non-transactionally or will throw an exception if one is open
		- SUPPORTED
			- will execute in the scope of a transaction if one is open, otherwise runs non-transactionally
		- NOT_SUPPORTED
			- executes non-transactionally no matter what, will pause current transaction if need be

